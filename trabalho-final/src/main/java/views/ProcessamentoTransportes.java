package views;

import handlers.DroneHandler;
import handlers.TransporteHandler;

import javax.swing.BorderFactory;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.LayoutStyle;
import javax.swing.SwingConstants;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.event.ActionEvent;

/**
 * {@link JInternalFrame} que contém o formulário utilizado
 * para realizar o processamento dos transportes pendentes.
 *
 * @author Lucas da Paz
 */
public class ProcessamentoTransportes extends javax.swing.JInternalFrame {
	private final DroneHandler droneHandler;
	private final TransporteHandler transporteHandler;

	/**
	 * Inicializa um novo frame {@link ProcessamentoTransportes}.
	 */
	public ProcessamentoTransportes() {
		droneHandler = DroneHandler.getHandler();
		transporteHandler = TransporteHandler.getHandler();
		initComponents();
		mostraTotalPendentes();
	}

	/**
	 * Exibe, na área de texto, a quantidade de transportes
	 * pendentes no sistema.
	 */
	private void mostraTotalPendentes() {
		int qtdPendentes = transporteHandler.getTotalPendentes();
		StringBuilder textoRegistro = new StringBuilder();
		textoRegistro.append(qtdPendentes == 0 ? "Nenhum" : qtdPendentes);
		textoRegistro.append(qtdPendentes <= 1 ? " transporte pendente" : " transportes pendentes");
		textoRegistro.append("!\n");

		textAreaRegistro.append(textoRegistro.toString());
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    JPanel painelHeader = new JPanel();
    JLabel title = new JLabel();
    JPanel painelRegistro = new JPanel();
    JScrollPane scrollPaneRegistro = new JScrollPane();
    textAreaRegistro = new JTextArea();
    JPanel painelBotoes = new JPanel();
    JButton btnProcessar = new JButton();
    JButton btnLimpar = new JButton();

    setClosable(true);
    setIconifiable(true);
    setMaximizable(true);
    setResizable(true);
    setTitle("Processamento de Transportes Pendentes");
    setVisible(true);

    title.setFont(Constantes.FONTE_TITULO);
    title.setHorizontalAlignment(SwingConstants.CENTER);
    title.setLabelFor(this);
    title.setText(getTitle());

    GroupLayout painelHeaderLayout = new GroupLayout(painelHeader);
    painelHeader.setLayout(painelHeaderLayout);
    painelHeaderLayout.setHorizontalGroup(painelHeaderLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(GroupLayout.Alignment.TRAILING, painelHeaderLayout.createSequentialGroup()
        .addContainerGap(109, Short.MAX_VALUE)
        .addComponent(title, GroupLayout.DEFAULT_SIZE, 322, Short.MAX_VALUE)
        .addContainerGap(111, Short.MAX_VALUE))
    );
    painelHeaderLayout.setVerticalGroup(painelHeaderLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(painelHeaderLayout.createSequentialGroup()
        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addComponent(title, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    painelRegistro.setBorder(BorderFactory.createTitledBorder("Registros"));
    painelRegistro.setPreferredSize(new Dimension(500, 225));

    textAreaRegistro.setEditable(false);
    textAreaRegistro.setColumns(20);
    textAreaRegistro.setLineWrap(true);
    textAreaRegistro.setRows(5);
    textAreaRegistro.setTabSize(2);
    textAreaRegistro.setToolTipText("Registros do processamento de transportes pendentes");
    textAreaRegistro.setWrapStyleWord(true);
    scrollPaneRegistro.setViewportView(textAreaRegistro);

    GroupLayout painelRegistroLayout = new GroupLayout(painelRegistro);
    painelRegistro.setLayout(painelRegistroLayout);
    painelRegistroLayout.setHorizontalGroup(painelRegistroLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addComponent(scrollPaneRegistro, GroupLayout.DEFAULT_SIZE, 490, Short.MAX_VALUE)
    );
    painelRegistroLayout.setVerticalGroup(painelRegistroLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addComponent(scrollPaneRegistro, GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE)
    );

    btnProcessar.setText("Processar");
    btnProcessar.setToolTipText("Realizar o processamento dos transportes pendentes");
    btnProcessar.setCursor(new Cursor(Cursor.HAND_CURSOR));
    btnProcessar.setPreferredSize(new Dimension(95, 30));
    getRootPane().setDefaultButton(btnProcessar);
    btnProcessar.addActionListener(this::processaTransportesPendentes);

    btnLimpar.setText("Limpar");
    btnLimpar.setToolTipText("Limpar campo de registros do processamento");
    btnLimpar.setCursor(new Cursor(Cursor.HAND_CURSOR));
    btnLimpar.setPreferredSize(new Dimension(95, 30));
    btnLimpar.addActionListener(this::limpaRegistros);

    GroupLayout painelBotoesLayout = new GroupLayout(painelBotoes);
    painelBotoes.setLayout(painelBotoesLayout);
    painelBotoesLayout.setHorizontalGroup(painelBotoesLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(painelBotoesLayout.createSequentialGroup()
        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addComponent(btnProcessar, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addComponent(btnLimpar, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    painelBotoesLayout.setVerticalGroup(painelBotoesLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(painelBotoesLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(painelBotoesLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
          .addComponent(btnProcessar, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
          .addComponent(btnLimpar, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    GroupLayout layout = new GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addComponent(painelHeader, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
          .addComponent(painelBotoes, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(painelRegistro, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap(20, Short.MAX_VALUE)
        .addComponent(painelHeader, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        .addGap(18, 18, 18)
        .addComponent(painelRegistro, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        .addGap(18, 18, 18)
        .addComponent(painelBotoes, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        .addContainerGap(35, Short.MAX_VALUE))
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void limpaRegistros(ActionEvent evt) {//GEN-FIRST:event_limpaRegistros
		textAreaRegistro.setText("");
  }//GEN-LAST:event_limpaRegistros

  private void processaTransportesPendentes(ActionEvent evt) {//GEN-FIRST:event_processaTransportesPendentes
		int pendentesAntes = transporteHandler.getTotalPendentes();
		boolean processado = transporteHandler.processaPendentes(droneHandler.buscaTodos());

		if (!processado) {
			String mensagem = "Processamento não realizado:\nNão há transportes pendentes!";
			textAreaRegistro.append("\n%s\n".formatted(mensagem));
			JOptionPane.showMessageDialog(this, mensagem, getTitle(), JOptionPane.INFORMATION_MESSAGE);
			return;
		}

		String separador = "%75s".formatted(" ").replace(" ", "-");
		StringBuilder registro = new StringBuilder(separador);
		registro.append("\n- Resultado do processamento -\n\n");

		int pendentesDepois = transporteHandler.getTotalPendentes();
		String alocados = "Transportes alocados: %d\n".formatted(pendentesAntes - pendentesDepois);

		registro.append("* Transportes pendentes antes do processamento: %d\n".formatted(pendentesAntes));
		registro.append("* ").append(alocados);
		registro.append("* Total de transportes pendentes: %d\n".formatted(pendentesDepois));
		registro.append(separador).append("\n");

		textAreaRegistro.append(registro.toString());
		JOptionPane.showMessageDialog(this, "Processamento concluído!\n%s".formatted(alocados), getTitle(), JOptionPane.INFORMATION_MESSAGE);
		mostraTotalPendentes();
  }//GEN-LAST:event_processaTransportesPendentes
	
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private JTextArea textAreaRegistro;
  // End of variables declaration//GEN-END:variables
}
