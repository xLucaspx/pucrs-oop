package views;

import dados.Drone;
import dados.DroneCargaInanimada;
import dados.DroneCargaViva;
import dados.DronePessoal;
import handlers.DroneHandler;

import javax.swing.BorderFactory;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFormattedTextField;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;
import javax.swing.LayoutStyle;
import javax.swing.SwingConstants;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.event.ActionEvent;

/**
 * {@link JInternalFrame} que contém o formulário
 * para o cadastro de novas instâncias de {@link Drone}
 * no sistema.
 *
 * @author Lucas da Paz
 */
public class CadastroDrone extends javax.swing.JInternalFrame {
	private final DroneHandler droneHandler;

	/**
	 * Inicializa um novo frame {@link CadastroDrone}.
	 */
	public CadastroDrone() {
		droneHandler = DroneHandler.getHandler();
		initComponents();
	}

	/**
	 * Limpa todos os campos de texto e caixas de seleção
	 * do formulário.
	 */
	private void limpaCampos() {
		inputCodigo.setText("");
		inputCustoFixo.setText("");
		inputAutonomia.setText("");
		inputMaxPessoasPessoal.setText("");
		inputPesoMaximoCargaInanimada.setText("");
		inputPesoMaximoCargaViva.setText("");
		checkProtecaoCargaInanimada.setSelected(false);
		checkClimatizacaoCargaViva.setSelected(false);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    JPanel painelHeader = new JPanel();
    JLabel title = new JLabel();
    JPanel painelDrone = new JPanel();
    JLabel labelCodigo = new JLabel();
    inputCodigo = new JFormattedTextField(Constantes.FORMATO_INTEIRO);
    JLabel labelCustoFixo = new JLabel();
    inputCustoFixo = new JFormattedTextField(Constantes.FORMATO_PONTO_FLUTUANTE);
    JLabel labelAutonomia = new JLabel();
    inputAutonomia = new JFormattedTextField(Constantes.FORMATO_PONTO_FLUTUANTE);
    painelAbas = new JTabbedPane();
    JPanel tabDronePessoal = new JPanel();
    JLabel labelMaxPessoasPessoal = new JLabel();
    inputMaxPessoasPessoal = new JFormattedTextField(Constantes.FORMATO_INTEIRO);
    JPanel tabDroneCargaInanimada = new JPanel();
    JLabel labelPesoMaximoCargaInanimada = new JLabel();
    inputPesoMaximoCargaInanimada = new JFormattedTextField(Constantes.FORMATO_PONTO_FLUTUANTE);
    checkProtecaoCargaInanimada = new JCheckBox();
    JPanel tabDroneCargaViva = new JPanel();
    JLabel labelPesoMaximoCargaViva = new JLabel();
    inputPesoMaximoCargaViva = new JFormattedTextField(Constantes.FORMATO_PONTO_FLUTUANTE);
    checkClimatizacaoCargaViva = new JCheckBox();
    JPanel painelBotoes = new JPanel();
    JButton btnCadastrar = new JButton();
    JButton btnLimpar = new JButton();

    setClosable(true);
    setIconifiable(true);
    setMaximizable(true);
    setResizable(true);
    setTitle("Cadastro de Drone");
    setPreferredSize(new Dimension(550, 415));
    setVisible(true);

    title.setFont(Constantes.FONTE_TITULO);
    title.setHorizontalAlignment(SwingConstants.CENTER);
    title.setLabelFor(this);
    title.setText(getTitle());
    title.setPreferredSize(new Dimension(70, 25));

    GroupLayout painelHeaderLayout = new GroupLayout(painelHeader);
    painelHeader.setLayout(painelHeaderLayout);
    painelHeaderLayout.setHorizontalGroup(painelHeaderLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(GroupLayout.Alignment.TRAILING, painelHeaderLayout.createSequentialGroup()
        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addComponent(title, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    painelHeaderLayout.setVerticalGroup(painelHeaderLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(painelHeaderLayout.createSequentialGroup()
        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addComponent(title, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    painelDrone.setBorder(BorderFactory.createTitledBorder("Informações gerais"));

    labelCodigo.setLabelFor(inputCodigo);
    labelCodigo.setText("Código:");
    labelCodigo.setPreferredSize(new Dimension(125, 15));

    inputCodigo.setPreferredSize(new Dimension(125, 30));

    labelCustoFixo.setLabelFor(inputCustoFixo);
    labelCustoFixo.setText("Custo fixo:");
    labelCustoFixo.setPreferredSize(new Dimension(125, 15));

    inputCustoFixo.setPreferredSize(new Dimension(125, 30));

    labelAutonomia.setLabelFor(inputAutonomia);
    labelAutonomia.setText("Autonomia:");
    labelAutonomia.setPreferredSize(new Dimension(125, 15));

    inputAutonomia.setPreferredSize(new Dimension(125, 30));

    GroupLayout painelDroneLayout = new GroupLayout(painelDrone);
    painelDrone.setLayout(painelDroneLayout);
    painelDroneLayout.setHorizontalGroup(painelDroneLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(painelDroneLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(painelDroneLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
          .addComponent(inputCodigo, GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
          .addComponent(labelCodigo, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addGap(18, 18, Short.MAX_VALUE)
        .addGroup(painelDroneLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
          .addComponent(inputCustoFixo, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(labelCustoFixo, GroupLayout.PREFERRED_SIZE, 130, GroupLayout.PREFERRED_SIZE))
        .addGap(18, 18, Short.MAX_VALUE)
        .addGroup(painelDroneLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
          .addComponent(inputAutonomia, GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
          .addComponent(labelAutonomia, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addContainerGap())
    );
    painelDroneLayout.setVerticalGroup(painelDroneLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(painelDroneLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(painelDroneLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
          .addGroup(painelDroneLayout.createSequentialGroup()
            .addComponent(labelCustoFixo, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(inputCustoFixo, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
          .addGroup(painelDroneLayout.createSequentialGroup()
            .addGroup(painelDroneLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
              .addComponent(labelAutonomia, GroupLayout.Alignment.LEADING, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
              .addComponent(labelCodigo, GroupLayout.Alignment.LEADING, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(painelDroneLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
              .addComponent(inputAutonomia, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
              .addComponent(inputCodigo, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))))
        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    painelAbas.setToolTipText("Escolha o tipo de drone que será cadastrado e preencha as informações");

    labelMaxPessoasPessoal.setLabelFor(inputMaxPessoasPessoal);
    labelMaxPessoasPessoal.setText("Máximo de Pessoas:");
    labelMaxPessoasPessoal.setPreferredSize(new Dimension(125, 15));

    inputMaxPessoasPessoal.setPreferredSize(new Dimension(125, 30));

    GroupLayout tabDronePessoalLayout = new GroupLayout(tabDronePessoal);
    tabDronePessoal.setLayout(tabDronePessoalLayout);
    tabDronePessoalLayout.setHorizontalGroup(tabDronePessoalLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(tabDronePessoalLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(tabDronePessoalLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
          .addComponent(labelMaxPessoasPessoal, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(inputMaxPessoasPessoal, GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE))
        .addContainerGap(461, Short.MAX_VALUE))
    );
    tabDronePessoalLayout.setVerticalGroup(tabDronePessoalLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(tabDronePessoalLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(labelMaxPessoasPessoal, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(inputMaxPessoasPessoal, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    painelAbas.addTab("Pessoal", tabDronePessoal);

    labelPesoMaximoCargaInanimada.setLabelFor(inputPesoMaximoCargaInanimada);
    labelPesoMaximoCargaInanimada.setText("Peso máximo:");
    labelPesoMaximoCargaInanimada.setPreferredSize(new Dimension(125, 15));

    inputPesoMaximoCargaInanimada.setPreferredSize(new Dimension(125, 30));

    checkProtecaoCargaInanimada.setText("Proteção");

    GroupLayout tabDroneCargaInanimadaLayout = new GroupLayout(tabDroneCargaInanimada);
    tabDroneCargaInanimada.setLayout(tabDroneCargaInanimadaLayout);
    tabDroneCargaInanimadaLayout.setHorizontalGroup(tabDroneCargaInanimadaLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(tabDroneCargaInanimadaLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(tabDroneCargaInanimadaLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
          .addComponent(inputPesoMaximoCargaInanimada, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(labelPesoMaximoCargaInanimada, GroupLayout.PREFERRED_SIZE, 130, GroupLayout.PREFERRED_SIZE))
        .addGap(18, 18, Short.MAX_VALUE)
        .addComponent(checkProtecaoCargaInanimada)
        .addContainerGap(370, Short.MAX_VALUE))
    );
    tabDroneCargaInanimadaLayout.setVerticalGroup(tabDroneCargaInanimadaLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(tabDroneCargaInanimadaLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(labelPesoMaximoCargaInanimada, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(tabDroneCargaInanimadaLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
          .addComponent(inputPesoMaximoCargaInanimada, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
          .addComponent(checkProtecaoCargaInanimada))
        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    painelAbas.addTab("Carga Inanimada", tabDroneCargaInanimada);

    labelPesoMaximoCargaViva.setLabelFor(inputPesoMaximoCargaViva);
    labelPesoMaximoCargaViva.setText("Peso máximo:");
    labelPesoMaximoCargaViva.setPreferredSize(new Dimension(125, 15));

    inputPesoMaximoCargaViva.setPreferredSize(new Dimension(125, 30));

    checkClimatizacaoCargaViva.setText("Climatização");

    GroupLayout tabDroneCargaVivaLayout = new GroupLayout(tabDroneCargaViva);
    tabDroneCargaViva.setLayout(tabDroneCargaVivaLayout);
    tabDroneCargaVivaLayout.setHorizontalGroup(tabDroneCargaVivaLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(tabDroneCargaVivaLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(tabDroneCargaVivaLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
          .addComponent(inputPesoMaximoCargaViva, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(labelPesoMaximoCargaViva, GroupLayout.PREFERRED_SIZE, 130, GroupLayout.PREFERRED_SIZE))
        .addGap(18, 18, Short.MAX_VALUE)
        .addComponent(checkClimatizacaoCargaViva)
        .addContainerGap(348, Short.MAX_VALUE))
    );
    tabDroneCargaVivaLayout.setVerticalGroup(tabDroneCargaVivaLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(tabDroneCargaVivaLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(labelPesoMaximoCargaViva, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(tabDroneCargaVivaLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
          .addComponent(inputPesoMaximoCargaViva, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
          .addComponent(checkClimatizacaoCargaViva))
        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    painelAbas.addTab("Carga Viva", tabDroneCargaViva);

    btnCadastrar.setText("Cadastrar");
    btnCadastrar.setToolTipText("Cadastrar novo drone");
    btnCadastrar.setCursor(new Cursor(Cursor.HAND_CURSOR));
    btnCadastrar.setPreferredSize(new Dimension(95, 30));
    getRootPane().setDefaultButton(btnCadastrar);
    btnCadastrar.addActionListener(this::cadastraDrone);

    btnLimpar.setText("Limpar");
    btnLimpar.setToolTipText("Limpar os campos do formulário");
    btnLimpar.setCursor(new Cursor(Cursor.HAND_CURSOR));
    btnLimpar.setPreferredSize(new Dimension(95, 30));
    btnLimpar.addActionListener(this::chamaLimpaCampos);

    GroupLayout painelBotoesLayout = new GroupLayout(painelBotoes);
    painelBotoes.setLayout(painelBotoesLayout);
    painelBotoesLayout.setHorizontalGroup(painelBotoesLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(painelBotoesLayout.createSequentialGroup()
        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addComponent(btnCadastrar, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addComponent(btnLimpar, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    painelBotoesLayout.setVerticalGroup(painelBotoesLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(painelBotoesLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(painelBotoesLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
          .addComponent(btnCadastrar, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
          .addComponent(btnLimpar, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    GroupLayout layout = new GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addComponent(painelHeader, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
      .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
          .addComponent(painelDrone, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(painelAbas, GroupLayout.Alignment.LEADING)
          .addComponent(painelBotoes, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap(20, Short.MAX_VALUE)
        .addComponent(painelHeader, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        .addGap(18, 18, 18)
        .addComponent(painelDrone, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        .addGap(18, 18, 18)
        .addComponent(painelAbas, GroupLayout.PREFERRED_SIZE, 100, GroupLayout.PREFERRED_SIZE)
        .addGap(18, 18, 18)
        .addComponent(painelBotoes, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        .addContainerGap(35, Short.MAX_VALUE))
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

	/**
	 * Valida os campos e cria um novo {@link Drone} com
	 * o código passado como argumento.
	 *
	 * @param codigo O código do drone que será criado.
	 * @return O drone instanciado, ou {@code null} se alguma
	 * das validações realizadas falhar.
	 */
	private Drone criaDrone(int codigo) {
		double custoFixo = Double.parseDouble(inputCustoFixo.getText());
		if (custoFixo < 0) {
			JOptionPane.showMessageDialog(this, "O custo fixo do drone não pode ser negativo!", getTitle(), JOptionPane.WARNING_MESSAGE);
			return null;
		}

		double autonomia = Double.parseDouble(inputAutonomia.getText());
		if (autonomia <= 0) {
			JOptionPane.showMessageDialog(this, "A autonomia do drone deve ser maior do que zero!", getTitle(), JOptionPane.WARNING_MESSAGE);
			return null;
		}

		int tipoDrone = painelAbas.getSelectedIndex();
		return switch (tipoDrone) {
			case 0 -> criaDronePessoal(codigo, custoFixo, autonomia);
			case 1 -> criaDroneCargaInanimada(codigo, custoFixo, autonomia);
			case 2 -> criaDroneCargaViva(codigo, custoFixo, autonomia);
			default -> null;
		};
	}

	/**
	 * Lê os campos necessários, realiza as validações e cria uma
	 * nova instância de {@link DronePessoal} com os valores passados
	 * como argumento.
	 *
	 * @param codigo    O código do drone.
	 * @param custoFixo O custo fixo do drone.
	 * @param autonomia A autonomia do drone.
	 * @return O drone instanciado, ou {@code null} se alguma das
	 * validações realizadas falhar.
	 */
	private Drone criaDronePessoal(int codigo, double custoFixo, double autonomia) {
		int maximoPessoas = Integer.parseInt(inputMaxPessoasPessoal.getText());
		if (maximoPessoas < 0) {
			JOptionPane.showMessageDialog(this, "O campo \"Máximo de pessoas\" não pode ser negativo!", getTitle(), JOptionPane.WARNING_MESSAGE);
			return null;
		}

		return new DronePessoal(codigo, custoFixo, autonomia, maximoPessoas);
	}

	/**
	 * Lê os campos necessários, realiza as validações e cria uma
	 * nova instância de {@link DroneCargaInanimada} com os valores
	 * passados como argumento.
	 *
	 * @param codigo    O código do drone.
	 * @param custoFixo O custo fixo do drone.
	 * @param autonomia A autonomia do drone.
	 * @return O drone instanciado, ou {@code null} se alguma das
	 * validações realizadas falhar.
	 */
	private Drone criaDroneCargaInanimada(int codigo, double custoFixo, double autonomia) {
		double pesoMaximo = Double.parseDouble(inputPesoMaximoCargaInanimada.getText());
		if (pesoMaximo <= 0) {
			JOptionPane.showMessageDialog(this, "O campo \"Peso máximo\" deve ser maior do que zero!", getTitle(), JOptionPane.WARNING_MESSAGE);
			return null;
		}

		boolean protecao = checkProtecaoCargaInanimada.isSelected();
		return new DroneCargaInanimada(codigo, custoFixo, autonomia, pesoMaximo, protecao);
	}

	/**
	 * Lê os campos necessários, realiza as validações e cria
	 * uma nova instância de {@link DroneCargaViva} com os valores
	 * passados como argumento.
	 *
	 * @param codigo    O código do drone.
	 * @param custoFixo O custo fixo do drone.
	 * @param autonomia A autonomia do drone.
	 * @return O drone instanciado, ou {@code null} se alguma das
	 * validações realizadas falhar.
	 */
	private Drone criaDroneCargaViva(int codigo, double custoFixo, double autonomia) {
		double pesoMaximo = Double.parseDouble(inputPesoMaximoCargaViva.getText());
		if (pesoMaximo <= 0) {
			JOptionPane.showMessageDialog(this, "O campo \"Peso máximo\" deve ser maior do que zero!", getTitle(), JOptionPane.WARNING_MESSAGE);
			return null;
		}

		boolean climatizacao = checkClimatizacaoCargaViva.isSelected();
		return new DroneCargaViva(codigo, custoFixo, autonomia, pesoMaximo, climatizacao);
	}

  private void cadastraDrone(ActionEvent evt) {//GEN-FIRST:event_cadastraDrone
		try {
			int codigo = Integer.parseInt(inputCodigo.getText());
			if (codigo <= 0) {
				JOptionPane.showMessageDialog(this, "O código do drone deve ser um inteiro positivo!", getTitle(), JOptionPane.WARNING_MESSAGE);
				return;
			}

			Drone novoDrone = criaDrone(codigo);

			if (novoDrone == null) {
				return;
			}

			String[] opcoes = {"Sim", "Não"};
			int resposta = JOptionPane.showOptionDialog(this,
				("%s\n\nConfirma a criação do drone?").formatted(novoDrone),
				getTitle(), JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, opcoes, opcoes[1]);

			if (resposta != 0) {
				return;
			}

			boolean sucesso = droneHandler.cadastra(novoDrone);
			if (!sucesso) {
				JOptionPane.showMessageDialog(this, "Já existe um drone cadastrado com o código %d".formatted(codigo),
					getTitle(), JOptionPane.WARNING_MESSAGE);
				return;
			}

			JOptionPane.showMessageDialog(this, "Drone cadastrado com sucesso!",
				getTitle(), JOptionPane.INFORMATION_MESSAGE);
			limpaCampos();
		} catch (Exception e) {
			e.printStackTrace(System.err);
			JOptionPane.showMessageDialog(this, "Erro ao cadastrar drone...\nVerifique o tipo de drone e se os campos estão preenchidos corretamente!", getTitle(), JOptionPane.ERROR_MESSAGE);
		}
  }//GEN-LAST:event_cadastraDrone

	private void chamaLimpaCampos(ActionEvent evt) {//GEN-FIRST:event_chamaLimpaCampos
		limpaCampos();
  }//GEN-LAST:event_chamaLimpaCampos

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private JCheckBox checkClimatizacaoCargaViva;
  private JCheckBox checkProtecaoCargaInanimada;
  private JFormattedTextField inputAutonomia;
  private JFormattedTextField inputCodigo;
  private JFormattedTextField inputCustoFixo;
  private JFormattedTextField inputMaxPessoasPessoal;
  private JFormattedTextField inputPesoMaximoCargaInanimada;
  private JFormattedTextField inputPesoMaximoCargaViva;
  private JTabbedPane painelAbas;
  // End of variables declaration//GEN-END:variables
}
